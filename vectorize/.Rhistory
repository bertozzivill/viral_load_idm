## Note: run from the mortality/data_prep/counties/03_clean_redistributed folder!
## Output:
##############################################################################################################################
library(data.table)
library(foreign)
library(reshape2)
yearval <- 1984 #TODO: pass this as an argument
root <- ifelse(Sys.info()[1] == "Windows", "J:/", "/home/j/")
pre_rdp_dir <- paste0(root, "Project/us_counties/mortality/data_prep/counties/02_prep_for_redistribution/deaths_by_cause_", yearval, ".csv")
main_dir <- paste0(root, 'Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/')
loc_cnty_dir <- paste0(root, 'Project/us_counties/locations/counties/locations.csv')
loc_mcnty_dir <- paste0(root, 'Project/us_counties/locations/counties/merged_counties.rdata')
function_dir <-  "../../_common/clean_redistributed_data/"
data <- fread(paste0(main_dir, "redistributed_raw/rdp_", yearval, ".csv"))
library(data.table)
library(foreign)
library(reshape2)
root <- ifelse(Sys.info()[1] == "Windows", "J:/", "/home/j/")
# immediately remove any causes that have zero associated deaths
data[, sum_deaths:= sum(deaths1), by="acause"]
data <- data[sum_deaths>0]
data[, sum_deaths:=NULL]
#drop cc_code, or any other level 1 secret codes because what are they even doing here
data <- data[!(secret_cause==1 & level==1)]
#read in data
print("reading cause and age data")
ages <- fread(paste0(root, "Project/us_counties/", "mortality/data_prep/cod_to_gbd_age.csv"))
causes <- fread(paste0(root, "Project/us_counties/", "mortality/data_prep/gbd_cause_list.csv"))
causes <- causes[, list(acause,cause_id, level, parent_id, secret_cause, yld_only)]
cause_hierarchy <-  fread(paste0(root, "Project/us_counties/", "mortality/data_prep/gbd_cause_hierarchy.csv"))
#make sure all the causes in the dataset are also in the cause list
cause_diff <- setdiff(data$acause, causes$acause)
if (length(cause_diff)!=0){
warning(paste("The following causes exist in the deaths data but not the cause list:", cause_diff))
}
#map acause to cause_id
print("adding cause ids")
setkeyv(data, "acause")
setkeyv(causes, "acause")
data <- merge(data, causes, all.x=T)
#make sure there are no yld only causes in the data
if (nrow(data[!is.na(yld_only)])!=0){
warning("Dataset contains deaths coded to YLD only causes! We're deleting them, but you should really fix that.")
data <- data[is.na(yld_only)]
}
#get complete death count, for checking
full_count <- sum(data$deaths1)
#'deaths26' is "unknown age"; make sure this is null, then delete
print("testing for unknown age groups")
unknown <- sum(data$deaths26)
if (unknown>0){
stop("unknown age groups!")
}
#reshape age long, get rid of a lot of columns
print("reshaping long")
data <- melt(data, id.vars=c("location_id", "year", "sex", "acause", "cause_id", "level", "parent_id","secret_cause"), measure.vars=grep("^deaths", names(data), value=T), variable.name="agename", value.name="death")
print("eliminating zeroes")
data <- data[data$death>0]
#merge on better age names
data <- merge(data, ages, by="agename", all.x=T)
#drop those age groups that don't correspond to our age group of interest
data <- data[!is.na(age)]
data[, agename:=NULL]
#check to make sure we didn't lose any deaths
new_count <- sum(data$death)
if (abs(full_count-new_count)>0.005){
stop(paste("deaths mismatch of ", abs(full_count-new_count), "!"))
}
#order
data <- data[order(year, level, cause_id, location_id, sex, age)]
#collapse secret codes into their parents
data[secret_cause==1, cause_id:=parent_id]
data <- data[, list(death=sum(death)), by="year,location_id,sex,age,cause_id"]
#merge full hierarchy on (will also revive parent ids, etc)
data <- merge(data, cause_hierarchy, by="cause_id", all.x=T)
data
summary(data)
###############################################################################################################################
## Author: Amelia Bertozzi-Villa
## Modified by Rebecca Stubbs 9/2/2015 to return to old "collapse_to_level"
## Description: Centrally run the code that cleans redistributed data and preps it to be collapsible to any level.
## Note: run from the mortality/data_prep/counties/03_clean_redistributed folder!
## Output:
##############################################################################################################################
library(data.table)
library(foreign)
library(reshape2)
yearval <- 1984 #TODO: pass this as an argument
root <- ifelse(Sys.info()[1] == "Windows", "J:/", "/home/j/")
pre_rdp_dir <- paste0(root, "Project/us_counties/mortality/data_prep/counties/02_prep_for_redistribution/deaths_by_cause_", yearval, ".csv")
main_dir <- paste0(root, 'Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/')
loc_cnty_dir <- paste0(root, 'Project/us_counties/locations/counties/locations.csv')
loc_mcnty_dir <- paste0(root, 'Project/us_counties/locations/counties/merged_counties.rdata')
function_dir <-  "../../_common/clean_redistributed_data/"
data <- fread(paste0(main_dir, "redistributed_raw/rdp_", yearval, ".csv"))
source(paste0(function_dir, "01_clean_redistributed_mort.r"))
source(paste0(function_dir, "02_sanity_checks.r"))
#source(paste0(function_dir, "03_collapse_to_level.r"))
#####################
## 01: Clean dataset
#####################
deaths <- clean_rdp(data)
#########################
## 02: Sanity checks
#########################
#sanity checks will always break so long as there are deaths getting coded to yld only causes, so skip this step for now
#sanity_checks(post_rdp=deaths, pre_rdp_dir=pre_rdp_dir, missing="age")
#################################
## 03: Merge cnty and mcnty
## onto these new datasets; save
################################
loc_cnty <- fread(loc_cnty_dir)
loc_cnty <- loc_cnty[, list(location_id, cnty=fips)]
load(loc_mcnty_dir)
loc <- loc[, list(mcnty, cnty)]
loc <- merge(loc, loc_cnty, by="cnty", all.x=T)
setkeyv(loc, "location_id"); setkeyv(deaths, "location_id"); setkeyv(collapsed, "location_id")
deaths <- merge(deaths, loc, all.x=T)
collapsed <- merge(collapsed, loc, all.x=T)
deaths <- deaths[, list(year, sex, age, mcnty, cnty, cause_level, cause_parent_id, cause_id, acause, death)]
collapsed <- collapsed[, list(year, sex, age, mcnty, cnty, cause_level, cause_id, acause, death)]
deaths <- deaths[order(year, sex, age, cnty, cause_id)]
collapsed <- collapsed[order(year, sex, age, cnty, cause_id)]
setkeyv(deaths, "cause_id"); setkeyv(collapsed, "cause_id")
save(deaths, file=paste0(main_dir, "redistributed_clean/rdp_", yearval, ".rdata"))
View(hierarchy)
rm(list=ls())
###############################################################################################################################
## Author: Amelia Bertozzi-Villa
## Modified by Rebecca Stubbs 9/2/2015 to return to old "collapse_to_level"
## Description: Centrally run the code that cleans redistributed data and preps it to be collapsible to any level.
## Note: run from the mortality/data_prep/counties/03_clean_redistributed folder!
## Output:
##############################################################################################################################
library(data.table)
library(foreign)
library(reshape2)
yearval <- 1984 #TODO: pass this as an argument
root <- ifelse(Sys.info()[1] == "Windows", "J:/", "/home/j/")
pre_rdp_dir <- paste0(root, "Project/us_counties/mortality/data_prep/counties/02_prep_for_redistribution/deaths_by_cause_", yearval, ".csv")
main_dir <- paste0(root, 'Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/')
loc_cnty_dir <- paste0(root, 'Project/us_counties/locations/counties/locations.csv')
loc_mcnty_dir <- paste0(root, 'Project/us_counties/locations/counties/merged_counties.rdata')
function_dir <-  "../../_common/clean_redistributed_data/"
data <- fread(paste0(main_dir, "redistributed_raw/rdp_", yearval, ".csv"))
source(paste0(function_dir, "01_clean_redistributed_mort.r"))
source(paste0(function_dir, "02_sanity_checks.r"))
#source(paste0(function_dir, "03_collapse_to_level.r"))
#####################
## 01: Clean dataset
#####################
deaths <- clean_rdp(data)
#########################
## 02: Sanity checks
#########################
#sanity checks will always break so long as there are deaths getting coded to yld only causes, so skip this step for now
#sanity_checks(post_rdp=deaths, pre_rdp_dir=pre_rdp_dir, missing="age")
#################################
## 03: Merge cnty and mcnty
## onto these new datasets; save
################################
loc_cnty <- fread(loc_cnty_dir)
loc_cnty <- loc_cnty[, list(location_id, cnty=fips)]
load(loc_mcnty_dir)
loc <- loc[, list(mcnty, cnty)]
loc <- merge(loc, loc_cnty, by="cnty", all.x=T)
setkeyv(loc, "location_id"); setkeyv(deaths, "location_id"); setkeyv(collapsed, "location_id")
deaths <- merge(deaths, loc, all.x=T)
collapsed <- merge(collapsed, loc, all.x=T)
deaths <- deaths[, list(year, sex, age, mcnty, cnty, cause_level, cause_parent_id, cause_id, acause, death)]
collapsed <- collapsed[, list(year, sex, age, mcnty, cnty, cause_level, cause_id, acause, death)]
deaths <- deaths[order(year, sex, age, cnty, cause_id)]
collapsed <- collapsed[order(year, sex, age, cnty, cause_id)]
setkeyv(deaths, "cause_id"); setkeyv(collapsed, "cause_id")
save(deaths, file=paste0(main_dir, "redistributed_clean/rdp_", yearval, ".rdata"))
load("J:/Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/redistributed_clean/rdp_1984.rdata")
deaths
###############################################################################################################################
## Author: Amelia Bertozzi-Villa
## Description: Aggregates all cleaned redistributed datasets, saves, and makes summary plots.
## Note: run from the mortality/data_prep/counties/03_clean_redistributed folder!
## Output: A dataset with year, sex, age, county, level, death count, and cause_id long, as well as a column for each
##          level of the cause hierarchy outlining each cause's path to top parent.
##############################################################################################################################
library(data.table)
library(foreign)
library(reshape2)
library(ggplot2)
# data_dir <- commandArgs()[3]
# yearvals <- commandArgs()[4]
root <- ifelse(Sys.info()[1] == "Windows", "J:/", "/home/j/")
data_dir <- paste0(root, 'Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/redistributed_clean/')
load(paste0(data_dir, "nat_rdp.rdata"))
nat
ggplot(nat[acause=="tb"], aes(x=year, y=death, group=1)) +
geom_line(size=3)
nat[order(acause,year)]
nat <- nat[order(acause,year)]
nat
causes <- unique(nat$acause)
causes
subcauses <- causes[1:10]
subcauses
subcauses <- causes[1:10]
ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause)
ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
subcauses <- causes[1:16]
ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
length(causes)
bin
bin <- 16
length(causes)/bin
iterations <- ceiling(length(causes)/bin)
iterations
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin*iteration
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin*iteration
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
subcauses
init_value
iteration
bin*iteration
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin*iteration
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
causes <- unique(nat$acause)
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
subcauses
init_value
length(causes)
causes <- unique(nat$acause)
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- floor(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- floor(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
bin <- 16
iterations <- floor(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
causes[1:16]
causes[17:48]
bin*2
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- bin*iteration
print(final_value)
subcauses <- causes[init_value:bin*iteration]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
subcauses
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- bin*iteration
print(final_value)
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
tail(causes)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- ifelse(iteration==iterations, length(causes),bin*iteration)
print(final_value)
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- ifelse(iteration==iterations, length(causes),bin*iteration)
print(paste("plotting values", init_value, "through", final_value))
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- ifelse(iteration==iterations, length(causes),bin*iteration)
print(paste("plotting values", init_value, "through", final_value))
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
color <- gg_color_hue(2)[[2]]
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
color <- gg_color_hue(2)[[2]]
color
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- ifelse(iteration==iterations, length(causes),bin*iteration)
print(paste("plotting values", init_value, "through", final_value))
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3, color=color) +
facet_wrap(~acause, scales="free_y") +
labs(title="Redistributed Deaths by Cause, National",
x="Year",
y="Deaths")
print(image)
}
graphics.off()
load("J:/Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/redistributed_clean/rdp_all.rdata")
deaths
710+580
load("J:/Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/redistributed_clean/rdp_allcause.rdata")
subset
load("J:/Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/redistributed_clean/rdp_allcause.rdata")
library(data.table)
subset
summed <- subset[, list(death=sum(death)), by="year,acause"]
summed
subset
summary(subset)
subset[, state:= floor(cnty/1000)]
subset
summed <- subset[, list(death=sum(death)), by="year,acause, state"]
summed <- subset[, list(death=sum(death)), by="year,acause,state"]
summed
library(ggplot2)
ggplot(summed, aes(x=year, y=death, group=state)) + geom_line(aes(color=state),size=3)
summed[, state:=as.factor(state)]
ggplot(summed, aes(x=year, y=death, group=state)) + geom_line(aes(color=state),size=3)
ggplot(summed, aes(x=year, y=death, group=state)) + geom_line(aes(color=state, group=state),size=3)
summary(summed)
load("J:/Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/redistributed_clean/rdp_allcause.rdata")
subset[, state:= floor(cnty/1000)]
summed <- subset[, list(death=sum(death)), by="year,acause,state"]
summed <- subset[, list(death=sum(death)), by="year,state"]
subset[, state:= floor(cnty/1000)]
summed
summed[, state:=as.factor(state)]
ggplot(summed, aes(x=year, y=death, group=state)) + geom_line(aes(color=state, group=state),size=3)
ggplot(summed, aes(x=year, y=death, group=state)) + geom_line(aes(color=state),size=3) + facet_wrap(~state)
ggplot(summed, aes(x=year, y=death, group=state)) + geom_line(aes(color=state),size=3) + facet_wrap(~state, scales="free")
loc_dir <- "/home/j/Project/us_counties/locations/counties/locations.csv"
fread(loc_dir)
50/350
14/3
4.7*5
load("J:/Project/us_counties/mortality/cod/exploratory/compare_us_king_models/rdp_date_2015_12_14_percent_differences.rdata")
library(data.table)
reshaped
reshaped[counties>1000]
test  <- reshaped[counties>1000]
test
test[order(counties)]
getwd()
setwd("work//repos/viral_load_idm//vectorize")
list.files()
load("C:/Users/abertozz/Dropbox (IDM)/viral_load/cascade/data/survival_model_output.rdata")
load("C:/Users/abertozz/Dropbox (IDM)/viral_load/cascade/data/imputed_survival_data.rdata")
survival.model.output
survival.model.output[[1]]
survival.model.output[[1]]["lm", 1]
survival.model.output[[1]]["lm", 1][[1]]
summary(survival.model.output[[1]]["lm", 1][[1]])
library(data.table)
summary(survival.model.output[[1]]["lm", 1][[1]])
summary.lm(survival.model.output[[1]]["lm", 1][[1]])
