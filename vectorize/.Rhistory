## 01: Clean dataset
#####################
deaths <- clean_rdp(data)
#########################
## 02: Sanity checks
#########################
#sanity checks will always break so long as there are deaths getting coded to yld only causes, so skip this step for now
#sanity_checks(post_rdp=deaths, pre_rdp_dir=pre_rdp_dir, missing="age")
#################################
## 03: Merge cnty and mcnty
## onto these new datasets; save
################################
loc_cnty <- fread(loc_cnty_dir)
loc_cnty <- loc_cnty[, list(location_id, cnty=fips)]
load(loc_mcnty_dir)
loc <- loc[, list(mcnty, cnty)]
loc <- merge(loc, loc_cnty, by="cnty", all.x=T)
setkeyv(loc, "location_id"); setkeyv(deaths, "location_id"); setkeyv(collapsed, "location_id")
deaths <- merge(deaths, loc, all.x=T)
collapsed <- merge(collapsed, loc, all.x=T)
deaths <- deaths[, list(year, sex, age, mcnty, cnty, cause_level, cause_parent_id, cause_id, acause, death)]
collapsed <- collapsed[, list(year, sex, age, mcnty, cnty, cause_level, cause_id, acause, death)]
deaths <- deaths[order(year, sex, age, cnty, cause_id)]
collapsed <- collapsed[order(year, sex, age, cnty, cause_id)]
setkeyv(deaths, "cause_id"); setkeyv(collapsed, "cause_id")
save(deaths, file=paste0(main_dir, "redistributed_clean/rdp_", yearval, ".rdata"))
load("J:/Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/redistributed_clean/rdp_1984.rdata")
deaths
###############################################################################################################################
## Author: Amelia Bertozzi-Villa
## Description: Aggregates all cleaned redistributed datasets, saves, and makes summary plots.
## Note: run from the mortality/data_prep/counties/03_clean_redistributed folder!
## Output: A dataset with year, sex, age, county, level, death count, and cause_id long, as well as a column for each
##          level of the cause hierarchy outlining each cause's path to top parent.
##############################################################################################################################
library(data.table)
library(foreign)
library(reshape2)
library(ggplot2)
# data_dir <- commandArgs()[3]
# yearvals <- commandArgs()[4]
root <- ifelse(Sys.info()[1] == "Windows", "J:/", "/home/j/")
data_dir <- paste0(root, 'Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/redistributed_clean/')
load(paste0(data_dir, "nat_rdp.rdata"))
nat
ggplot(nat[acause=="tb"], aes(x=year, y=death, group=1)) +
geom_line(size=3)
nat[order(acause,year)]
nat <- nat[order(acause,year)]
nat
causes <- unique(nat$acause)
causes
subcauses <- causes[1:10]
subcauses
subcauses <- causes[1:10]
ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause)
ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
subcauses <- causes[1:16]
ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
length(causes)
bin
bin <- 16
length(causes)/bin
iterations <- ceiling(length(causes)/bin)
iterations
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin*iteration
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin*iteration
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
subcauses
init_value
iteration
bin*iteration
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin*iteration
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
causes <- unique(nat$acause)
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
subcauses
init_value
length(causes)
causes <- unique(nat$acause)
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- floor(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- floor(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
graphics.off()
bin <- 16
iterations <- floor(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
subcauses <- causes[init_value:bin*iteration]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
causes[1:16]
causes[17:48]
bin*2
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- bin*iteration
print(final_value)
subcauses <- causes[init_value:bin*iteration]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
subcauses
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- bin*iteration
print(final_value)
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
tail(causes)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- ifelse(iteration==iterations, length(causes),bin*iteration)
print(final_value)
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
print(init_value)
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- ifelse(iteration==iterations, length(causes),bin*iteration)
print(paste("plotting values", init_value, "through", final_value))
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- ifelse(iteration==iterations, length(causes),bin*iteration)
print(paste("plotting values", init_value, "through", final_value))
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3) +
facet_wrap(~acause, scales="free_y")
print(image)
}
color <- gg_color_hue(2)[[2]]
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
color <- gg_color_hue(2)[[2]]
color
pdf(paste0(data_dir, "redistributed_deaths.pdf"), width=14, height=8)
bin <- 16
iterations <- ceiling(length(causes)/bin)
init_value <- 1
for (iteration in 1:iterations){
print(iteration)
final_value <- ifelse(iteration==iterations, length(causes),bin*iteration)
print(paste("plotting values", init_value, "through", final_value))
subcauses <- causes[init_value:final_value]
#print(subcauses)
init_value <- init_value + bin
image <- ggplot(nat[acause %in% subcauses], aes(x=year, y=death, group=1)) +
geom_line(size=3, color=color) +
facet_wrap(~acause, scales="free_y") +
labs(title="Redistributed Deaths by Cause, National",
x="Year",
y="Deaths")
print(image)
}
graphics.off()
load("J:/Project/us_counties/mortality/data_prep/counties/03_clean_redistributed/redistributed_clean/rdp_all.rdata")
deaths
710+580
##loop through directories, running models for that cross-validation each time
# run from "cross_validation" folder!
library(data.table)
source("calculate_rmse.r")
setwd("../vectorize")
source("data.transform_model.selection.R")
main_dir <- "C:/Users/abertozz/Dropbox (IDM)/viral_load/cascade/data/cross_validation/"
for (iteration in 1:8){
for (split in 1:10){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
#data.transform_model.selection(new_dir)
calc_rmse(new_dir)
}
}
getwd()
setwd("work//repos/viral_load_idm//cross_validation")
list.files()
##loop through directories, running models for that cross-validation each time
# run from "cross_validation" folder!
library(data.table)
source("calculate_rmse.r")
setwd("../vectorize")
source("data.transform_model.selection.R")
main_dir <- "C:/Users/abertozz/Dropbox (IDM)/viral_load/cascade/data/cross_validation/"
for (iteration in 1:8){
for (split in 1:10){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
#data.transform_model.selection(new_dir)
calc_rmse(new_dir)
}
}
##loop through directories, running models for that cross-validation each time
# run from "cross_validation" folder!
library(data.table)
source("calculate_rmse.r")
setwd("../vectorize")
source("data.transform_model.selection.R")
main_dir <- "C:/Users/abertozz/Dropbox (IDM)/viral_load/cascade/data/cross_validation/"
for (iteration in 1:8){
for (split in 1:10){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
#data.transform_model.selection(new_dir)
calc_rmse(new_dir)
}
}
getwd()
setwd("../cross_validation/")
##loop through directories, running models for that cross-validation each time
# run from "cross_validation" folder!
library(data.table)
source("calculate_rmse.r")
setwd("../vectorize")
source("data.transform_model.selection.R")
main_dir <- "C:/Users/abertozz/Dropbox (IDM)/viral_load/cascade/data/cross_validation/"
for (iteration in 1:8){
for (split in 1:10){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
#data.transform_model.selection(new_dir)
calc_rmse(new_dir)
}
}
##compile all rmse values; take the mean; find best model
library(data.table)
main_dir <- "C:/Users/abertozz/Dropbox (IDM)/viral_load/cascade/data/cross_validation/"
#load rmse results
print("loading rmse")
for (iteration in 1:8){
for (split in 1:10){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
load(paste0(new_dir, "rmse.rdata"))
apply(all_rmse, c(1,2), mean)
}
}
compiled_rmse <- lapply(1:8, function(iteration){
iteration_rmse <- lapply(1:10, function(split){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
load(paste0(new_dir, "rmse.rdata"))
split_rmse <- apply(all_rmse, c(1,2), mean)
return(split_rmse)
})
return(iteration_rmse)
})
compiled_rmse
compiled_rmse[[1]]
do.call("mean", compiled_rmse)
apply(compiled_rmse,, mean)
dim(compiled_rmse)
iteration
split
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
load(paste0(new_dir, "rmse.rdata"))
split_rmse <- apply(all_rmse, c(1,2), mean)
split_rmse
iteration_rmse <- lapply(1:10, function(split){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
load(paste0(new_dir, "rmse.rdata"))
split_rmse <- apply(all_rmse, c(1,2), mean)
return(split_rmse)
})
iteration_rmse
do.call("mean", iteration_rmse)
apply(iteration_rmse, mean)
apply(iteration_rmse,, mean)
apply(iteration_rmse,1, mean)
Reduce("mean", iteration_rmse)
class(split_rmse)
class(iteration_rmse)
class(iteration_rmse[[1]])
sapply(iteration_rmse, mean)
lapply(iteration_rmse, mean)
Reduce("mean", iteration_rmse, trim=0)
Reduce("+", iteration_rmse)
iteration_count <- length(iteration_rmse)
iteration_rmse <- Reduce("+", iteration_rmse) / iteration_count
iteration_rmse
##compile all rmse values; take the mean; find best model
library(data.table)
main_dir <- "C:/Users/abertozz/Dropbox (IDM)/viral_load/cascade/data/cross_validation/"
#load rmse results
print("loading rmse")
for (iteration in 1:8){
for (split in 1:10){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
load(paste0(new_dir, "rmse.rdata"))
apply(all_rmse, c(1,2), mean)
}
}
compiled_rmse <- lapply(1:8, function(iteration){
iteration_rmse <- lapply(1:10, function(split){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
load(paste0(new_dir, "rmse.rdata"))
split_rmse <- apply(all_rmse, c(1,2), mean)
return(split_rmse)
})
#take the mean of this list
iteration_count <- length(iteration_rmse)
iteration_rmse <- Reduce("+", iteration_rmse) / iteration_count
return(iteration_rmse)
})
#take the mean of THIS list
compiled_count <- length(compiled_rmse)
compiled_rmse <- Reduce("+", compiled_rmse) / compiled_count
compiled_rmse
which(compiled_rmse==min(compiled_rmse))
which(compiled_rmse==min(compiled_rmse), arr.ind=T)
best_model <- which(compiled_rmse==min(compiled_rmse), arr.ind=T)
best_model
best_model$col
best_model[[col]]
best_model[,col]
best_model[,"col"]
best_row <- best_model["row",]
best_col <- best_model[,"col"]
best_row <- best_model[,"row"]
best_row
best_col
best_row <- rownames(compiled_rmse)[[best_model[,"row"]]]
best_row
best_col <- colnames(compiled_rmse)[[best_model[,"col"]]]
best_col
##compile all rmse values; take the mean; find best model
library(data.table)
main_dir <- "C:/Users/abertozz/Dropbox (IDM)/viral_load/cascade/data/cross_validation/"
#load rmse results
print("loading rmse")
for (iteration in 1:8){
for (split in 1:10){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
load(paste0(new_dir, "rmse.rdata"))
apply(all_rmse, c(1,2), mean)
}
}
compiled_rmse <- lapply(1:8, function(iteration){
iteration_rmse <- lapply(1:10, function(split){
new_dir <-paste0(main_dir, iteration, "/", split, "/")
print(paste("iteration", iteration, "split", split))
load(paste0(new_dir, "rmse.rdata"))
split_rmse <- apply(all_rmse, c(1,2), mean)
return(split_rmse)
})
#take the mean of this list
iteration_count <- length(iteration_rmse)
iteration_rmse <- Reduce("+", iteration_rmse) / iteration_count
return(iteration_rmse)
})
#take the mean of THIS list
compiled_count <- length(compiled_rmse)
compiled_rmse <- Reduce("+", compiled_rmse) / compiled_count
#find the indices of the minimum RMSE
best_model <- which(compiled_rmse==min(compiled_rmse), arr.ind=T)
best_row <- rownames(compiled_rmse)[[best_model[,"row"]]]
best_col <- colnames(compiled_rmse)[[best_model[,"col"]]]
print(paste("best model has data transform", best_row, "and model specification", best_col, "!"))
